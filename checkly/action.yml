name: "Checkly Deployment"
description: "Run and deploy Checkly tests"

inputs:
  private-location-name:
    description: "Name of the Checkly private location"
    required: true
  api-key:
    description: "Checkly API key"
    required: true
  account-id:
    description: "Api keyCheckly account id"
    required: true
  config-path:
    description: "Path to the Checkly configuration file"
    default: "checkly.config.ts"
    required: false
  main-branch-name:
    description: "Name of the main branch"
    default: "refs/heads/main"
    required: false
  vars-as-json:
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/setup-node@v4
      with:
        node-version: 22.x
    - name: Get CortexApiKey secret
      id: get_cortex_secret
      uses: workleap/wl-reusable-workflows/retrieve-managed-secret@main
      with:
        azure-client-id: ${{ fromJSON(inputs.vars-as-json).AZURE_CLIENT_ID }}
        azure-tenant-id: ${{ fromJSON(inputs.vars-as-json).AZURE_TENANT_ID }}
        azure-subscription-id: ${{ fromJSON(inputs.vars-as-json).AZURE_SUBSCRIPTION_ID }}
        keyvault-name: ${{ fromJSON(inputs.vars-as-json).IDP_CICD_KEYVAULT_NAME }}
        secret-name: "CortexApiKey"

    - name: Update tags
      shell: pwsh
      env:
        GitRepository: "${{ github.repositoryUrl }}"
        CortexApiKey: "${{ steps.get_cortex_secret.outputs.secret }}"
      run: |
        $token = "${{ inputs.CortexApiKey }}"

        # List all services from Cortex
        $Entities = (Invoke-RestMethod -Uri "https://api.getcortexapp.com/api/v1/catalog?pageSize=1000" -Headers @{Authorization = "Bearer ${env:CortexApiKey}" }).Entities
        Write-Host "Found $($Entities.Count) entities"

        $Root = Get-Location
        $GitRepository = "$env:GitRepository" -replace "git://","https://"
        Write-Host "Git Repository: $GitRepository"

        foreach ($file in Get-ChildItem -LiteralPath $Root -Recurse -Filter "*.check.ts") {
            Write-Host "Processing $file"
            $content = $file | Get-Content

            # Check if the file contains cortexTags
            if (-not ($content -match "...cortexTags")) {
                Write-Host "No '...cortexTags' found in $file"
                continue
            }

            # Count number of "new ApiCheck(" in the file. The number of "...cortexTags" must match
            $count = $content | Select-String -Pattern "new (ApiCheck|BrowserCheck)\(" -AllMatches | Measure-Object | Select-Object -ExpandProperty Count
            if ($count -eq 0) {
                Write-Host "No checks found in $file"
                continue
            }

            $tags = $content | Select-String -Pattern "\.\.\.cortexTags" -AllMatches | Measure-Object | Select-Object -ExpandProperty Count
            if ($tags -ne $count) {
                Write-Error "Number of checks and tags do not match in $file"
                exit 1
            }

            # Find the Cortex entity matching the repo and basepath of the file
            $RelativeFilePath = $file.FullName.Substring($Root.Length + 1) -replace "\\", "/"
            $entity = $Entities | Where-Object { $_.git.repositoryUrl -eq $GitRepository } | Sort-Object -Descending -Property { $_.git.basePath.Length } | Where-Object { $RelativeFilePath.StartsWith($_.git.basePath) } | Select-Object -First 1
            if ($null -eq $entity) {
                Write-Error "No entity found for $file"
                exit 1
            }

            # Replace file content "const cortexTags = []" with all tags from the entity
            $tags = "`"cortex-entity:$($entity.tag)`""
            foreach($group in $entity.groups){
                $tags += ", `"cortex-group:$group`""
            }

            $content = $content -replace "(?<=const\s+?cortexTags\s*?(:\s*string\s*\[\s*\]\s*)?=\s*?\[)(?=\])", $tags
            $file | Set-Content -Value $content
            Write-Host "Updated tags in ${file}: $tags"
        }

    - name: Test Checks
      shell: pwsh
      run: |
        npm i --save-dev checkly ts-node typescript

        echo 'Fetching environment variables...'
        npx checkly env pull env.prod 

        echo 'Running Checkly tests...'
        npx checkly test --verbose --record --reporter ci --private-location ${{ inputs.private-location-name }} --config="${{ github.workspace }}/${{ inputs.config-path }}" --env-file ./env.prod
        
        echo 'Previewing the changes...'
        npx checkly deploy --preview --config="${{ github.workspace }}/${{ inputs.config-path }}"
      env:
        CHECKLY_API_KEY: ${{ inputs.api-key }}
        CHECKLY_ACCOUNT_ID: ${{ inputs.account-id }}
        CHECKLY_REPO_BRANCH: ${{ github.ref }}

    - name: Deploy to Checkly
      if: ${{ success() && github.ref == inputs.main-branch-name }}
      shell: pwsh
      run: |
        npx checkly deploy --force --config="${{ github.workspace }}/${{ inputs.config-path }}"
      env:
        CHECKLY_API_KEY: ${{ inputs.api-key }}
        CHECKLY_ACCOUNT_ID: ${{ inputs.account-id }}
        CHECKLY_REPO_BRANCH: ${{ github.ref }}