# Policy format:
# [
#   {
#     "checks": ["check1", "check2"],
#     "paths": ["service1/"]
#   },
#   {
#     "checks": ["check1"],
#     "paths": ["service2/"]
#   },
# ]
on:
    workflow_call:
        inputs:
            policy:
                required: false
                type: string
            policyPath:
                required: false
                type: string
            failIfNoPolicy:
                required: false
                type: boolean
                default: true
            timeout-minutes:
                required: false
                description: The maximum number of minutes to let a workflow run before GitHub automatically cancels it.
                type: number
                default: 360 # Same value as the default for GitHub Actions
            timeout-minutes-queued-checks:
                required: false
                description: |
                  The maximum number of minutes to let required checks in queued state before canceling the workflow.
                type: number
                default: 30
            timeout-minutes-created-checks:
                required: false
                description: |
                  The maximum number of minutes to let a check be created before canceling the workflow.
                type: number
                default: 15

jobs:
    evaluate_policy:
        runs-on: ubuntu-latest
        timeout-minutes: ${{ inputs.timeout-minutes }}
        steps:
            - uses: actions/checkout@v4
              with:
                fetch-depth: 0
            - shell: pwsh
              env:
                CI_POLICY: ${{ inputs.policy }}
                CI_POLICY_PATH: ${{ inputs.policyPath }}
                CI_FAIL_IF_NO_POLICY: ${{ inputs.failIfNoPolicy }}
                CI_TIMEOUT_MINUTES_QUEUED_CHECKS: ${{ inputs.timeout-minutes-queued-checks }}
                CI_TIMEOUT_MINUTES_CREATED_CHECKS: ${{ inputs.timeout-minutes-created-checks }}
                REPOSITORY_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
                GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                $ErrorActionPreference = "Stop"
                $PSNativeCommandUseErrorActionPreference = $true

                # Load policy
                $policyPath = $env:CI_POLICY_PATH
                if ($policyPath) {
                    Write-Host "Loading policy from path: $policyPath"
                    if (-not (Test-Path -Path $policyPath)) {
                        Write-Error "❌ Policy file not found at path: $policyPath"
                        exit 1
                    }
                    $policy = Get-Content -Path $policyPath | ConvertFrom-Json
                }
                else {
                    Write-Host "CI_POLICY_PATH is not set. Using CI_POLICY environment variable."
                    $policy = $env:CI_POLICY | ConvertFrom-Json
                }

                if (-not $policy) {
                    Write-Error "❌ Policy is not defined or is empty."
                    exit 1
                }

                Write-Host "::group::Policy details"
                Write-Host ($policy | ConvertTo-Json -Depth 10)
                Write-Host "::endgroup::"

                # Find base/head refs to compare
                $CommitId = $env:GITHUB_SHA
                $BaseRef = $env:GITHUB_BASE_REF
                $HeadRef = $env:GITHUB_HEAD_REF
                if (!$HeadRef) {
                    $HeadRef = $env:GITHUB_REF_NAME
                }

                if (!$BaseRef) {
                    Write-Host "Base ref is not set. Falling back to default branch '$env:REPOSITORY_DEFAULT_BRANCH'."
                    $BaseRef = $env:REPOSITORY_DEFAULT_BRANCH
                }

                Write-Host "Change description:"
                Write-Host "Commit ID: $CommitId"
                Write-Host "Base Ref: $BaseRef"
                Write-Host "Head Ref: $HeadRef"
                Write-Host ""

                # List changed files between base and head refs for debugging purpose
                $diff = (git diff --name-only "refs/remotes/origin/$BaseRef...refs/remotes/origin/$HeadRef") | Where-Object { $_ }
                if (!$diff) {
                    Write-Host "✅ No changes detected between '$BaseRef' and '$HeadRef'."
                    exit 0
                }

                Write-Host "::group::Changed files between '$BaseRef' and '$HeadRef'"
                $diff | ForEach-Object {
                    Write-Host "- $_"
                }

                Write-Host "::endgroup::"
                Write-Host ""

                # Find required checks for changed files
                $requiredChecks = @()
                foreach ($item in $policy) {
                    $checks = $item.checks
                    $paths = $item.paths
                    foreach ($path in $paths) {
                        $diff = (git diff --name-only "refs/remotes/origin/$BaseRef...refs/remotes/origin/$HeadRef" -- $path) | Where-Object { $_ }
                        if ($diff  ) {
                            foreach ($check in $checks) {
                                $requiredChecks += $check
                            }
                        }
                    }
                }

                if ($requiredChecks.Count -eq 0) {
                    if ($env:CI_FAIL_IF_NO_POLICY) {
                        Write-Error "❌ No required checks found for the changed paths, but CI_FAIL_IF_NO_POLICY is set."
                        exit 1
                    }

                    Write-Host "✅ No required checks found for the changed paths."
                    exit 0
                }

                $requiredChecks = $requiredChecks | Sort-Object -Unique
                Write-Host "Required checks for changed paths:"
                $requiredChecks | ForEach-Object {
                    Write-Host "- $_"
                }

                Write-Host ""

                Write-Host "Waiting for required checks to complete..."
                # https://docs.github.com/en/rest/checks/runs?apiVersion=2022-11-28#list-check-runs-for-a-git-reference
                $url = "repos/$env:GITHUB_REPOSITORY/commits/$HeadRef/check-runs?filter=latest&per_page=100"
                Write-Debug "API URL: $url"

                $attempt = 0;

                # TODO support CI_TIMEOUT_MINUTES_TO_START_CHECKS
                $TimeoutCreated = New-TimeSpan -Minutes $env:CI_TIMEOUT_MINUTES_CREATED_CHECKS
                $TimeoutQueued = New-TimeSpan -Minutes $env:CI_TIMEOUT_MINUTES_QUEUED_CHECKS
                $startedAt = Get-Date -AsUTC
                while ($true) {
                    $checkRuns = gh api --paginate $url | ConvertFrom-Json
                    Write-Host "::debug::Check runs response ($url): $($checkRuns | ConvertTo-Json -Compress -Depth 10)"

                    $completed = $true
                    $CompletedCheckNames = @()
                    foreach ($requiredCheck in $requiredChecks) {
                        $check = $checkRuns.check_runs | Where-Object { $_.name -eq $requiredCheck }

                        # Not supported yet: Handle case where there are multiple checks with the same name (e.g. push / pull_request)
                        # Check how GitHub handles this case when using required checks in branch protection rules
                        if ($checks.Count -gt 1) {
                            Write-Host "⚠️ Multiple checks found with name '$requiredCheck'. This is not supported yet. Please report an issue if you encounter this."
                            exit 1
                        }

                        if ($check) {
                            if ($check.status -eq "completed") {
                                if ($check.conclusion -ne "success") {
                                    Write-Error "❌ Check '$requiredCheck' failed with conclusion: $($check.conclusion)"
                                    exit 1
                                }
                                else {
                                    $CompletedCheckNames += $requiredCheck
                                }
                            }
                            elseif ($check.status -eq "queued") {
                                $completed = $false
                                if ((Get-Date -AsUTC) - $startedAt -gt $TimeoutQueued) {
                                    Write-Error "❌ Check '$requiredCheck' is still queued after $($Timeout.TotalMinutes) minutes."
                                    exit 1
                                }
                            }
                        }
                        else {
                            $completed = $false
                            if ((Get-Date -AsUTC) - $startedAt -gt $TimeoutCreated) {
                                Write-Error "❌ Check '$requiredCheck' is not created after $($Timeout.TotalMinutes) minutes."
                                exit 1
                            }
                        }
                    }

                    if ($completed) {
                        Write-Host "✅ All required checks have passed."
                        exit 0
                    }

                    $attempt += 1
                    $WaitTime = 10 * $attempt
                    if ($WaitTime -gt 60) {
                        $WaitTime = 60
                    }

                    $InfoLog = ""
                    if ($CompletedCheckNames.Count -gt 0) {
                        $InfoLog += "Completed checks: $(($CompletedCheckNames | Sort-Object) -join ', ')."
                    }
                    else {
                        $InfoLog += "No checks completed yet."
                    }

                    Write-Host "$InfoLog Waiting for $WaitTime seconds before checking again..."
                    Start-Sleep -Seconds $WaitTime
                }
